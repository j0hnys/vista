<style scoped>

</style>
<template>
    <Form ref="formValidate" :model="formValidate" :rules="ruleValidate" :label-width="150">
        {{# form_elements }}
        <FormItem label="{{column_name}}" prop="{{column_name}}">
        {{# validation_rules }}
            {{# attributes }}
                {{# type }}
                {{# string }}
            <Input v-model="formValidate.{{column_name}}" placeholder="Enter your {{column_name}}"></Input>
                {{/ string }}
                {{# number }}
            <InputNumber v-model="formValidate.{{column_name}}" placeholder="Enter your {{column_name}}"></InputNumber>
                {{/ number }}
                {{# switch }}
            <i-switch v-model="formValidate.{{column_name}}">
                {{# fields }}
                <span slot="{{name}}">{{text}}</span>
                {{/ fields }}
            </i-switch>
                {{/ switch }}
                {{# date }}
            <DatePicker type="{{element_type}}" v-model="formValidate.{{column_name}}"></DatePicker>
                {{/ date }}
                {{# text }}
            <Input type="{{element_type}}" v-model="formValidate.{{column_name}}"></Input>
                {{/ text }}
                {{# slider }}
            <Slider v-model="formValidate.{{column_name}}" range></Slider>
                {{/ slider }}
                {{# radio }}
            <RadioGroup v-model="formValidate.{{column_name}}">
                {{# fields }}
                <Radio label="{{name}}">{{text}}</Radio>
                {{/ fields }}
            </RadioGroup>
                {{/ radio }}
                {{# checkbox }}
            <CheckboxGroup v-model="formValidate.{{column_name}}">
                {{# fields }}
                <Checkbox label="{{name}}">{{text}}</Checkbox>
                {{/ fields }}
            </CheckboxGroup>
                {{/ checkbox }}
                {{# file }}
            <Upload action="" :before-upload="handleUpload">
                <Button icon="ios-cloud-upload-outline">Upload files</Button>
            </Upload>
            <div v-if="formValidate.file !== null">Upload file: {{ formValidate.file.name }} </div>
                {{/ file }}
                {{/ type }}
            {{/ attributes }}
        {{/ validation_rules }}
        </FormItem>
        {{/ form_elements }}        
        
        <FormItem>
            <Button type="primary" @click="handleSubmit('formValidate')">Submit</Button>
        </FormItem>
    </Form>
</template>
<script>
    export default {
        namespace: '{{component_namespace}}',
        name: '{{component_name}}',
        props: {
            form_data: {
                type: Object,
                default: {},
            }
        },
        data() {
            var local = {
                formValidate: {
                    {{# form_data_parameters }}
                    {{# attributes }}
                    {{column_name}}: {{default_value}},
                    {{/ attributes }}
                    {{/ form_data_parameters }}
                },
            };

            return {
                ...local,
                ruleValidate: {
                    {{# validation_rules }}
                    {{column_name}}: [
                        { 
                        {{# validation_rules }}
                            {{# required }}
                            required: true, 
                            {{/ required }}
                            {{# type }}
                            type: '{{type}}', 
                            {{/ type }}
                            {{# max }}
                            max: {{max}}, 
                            {{/ max }}
                            {{# min }}
                            min: {{min}}, 
                            {{/ min }}
                            {{# trigger }}
                            trigger: '{{trigger}}',
                            {{/ trigger }}
                            message: 'The {{column_name}} cannot be empty', 
                        {{/ validation_rules }}
                        }
                    ],
                    {{/ validation_rules }}
                },

            };
        },
        watch: {
            form_data(value) {
                this.formValidate = value;
            }
        },
        methods: {
            handleUpload (file) {
                this.formValidate.file = file;
                return false;
            },
            handleSubmit (name) {
                this.$refs[name].validate((valid) => {
                    if (valid) {                        
                        var formValidate = this.formValidate;
                        this.$emit('on-form-submitted-successfully', formValidate);                        
                    } else {
                        this.$Message.error('Fail!');
                    }
                })
            },
        },
        mounted() {
            //
        },
    }
</script>
